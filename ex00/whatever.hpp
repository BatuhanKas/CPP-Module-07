/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   whatever.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bkas <bkas@student.42kocaeli.com.tr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/26 13:24:03 by bkas              #+#    #+#             */
/*   Updated: 2024/09/26 14:14:23 by bkas             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* **************************** [v] DEFINES [v] **************************** */

#ifndef WHATEVER_HPP
#define WHATEVER_HPP

/* **************************** [^] DEFINES [^] **************************** */

/* **************************** [v] INCLUDES [v] **************************** */

#include <iostream>

/* **************************** [^] INCLUDES [^] **************************** */

/* **************************** [v] DEFINES [v] **************************** */

using std::cout;
using std::endl;
using std::string;

/* **************************** [^] DEFINES [^] **************************** */

/* ***************************** [v] SWAP [v] ***************************** */

template <typename T>
void swap(T &a, T &b) {
    T tmp = a;
    a = b;
    b = tmp;
}

/* ***************************** [^] SWAP [^] ***************************** */

/* ****************************** [v] MIN [v] ****************************** */

template <typename T>
T &min(T &a, T &b) {
    return a < b ? a : b;
}

/* ****************************** [^] MIN [^] ****************************** */

/* ****************************** [v] MAX [v] ****************************** */

template <typename T>
T &max(T &a, T &b) {
    return a > b ? a : b;
}

/* ****************************** [^] MAX [^] ****************************** */

#endif
